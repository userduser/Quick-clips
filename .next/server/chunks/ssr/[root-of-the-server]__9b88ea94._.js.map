{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///app/src/lib/auth.ts"],"sourcesContent":["import { hash, compare } from \"bcryptjs\";\n\nexport async function hashPassword(password: string) {\n  return hash(password, 12);\n}\n\nexport async function comparePasswords(\n  plainPassword: string,\n  hashedPassword: string,\n) {\n  return compare(plainPassword, hashedPassword);\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IACjD,OAAO,CAAA,GAAA,iIAAA,CAAA,OAAI,AAAD,EAAE,UAAU;AACxB;AAEO,eAAe,iBACpB,aAAqB,EACrB,cAAsB;IAEtB,OAAO,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,EAAE,eAAe;AAChC","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///app/src/schemas/auth.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const signupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type SignupFormValues = z.infer<typeof signupSchema>;\nexport type LoginFormValues = z.infer<typeof loginSchema>;\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAEO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///app/src/env.js"],"sourcesContent":["// Simple mock env for development\nexport const env = {\n  AUTH_SECRET: process.env.AUTH_SECRET || \"mock-auth-secret\",\n  DATABASE_URL: process.env.DATABASE_URL || \"postgresql://mock:mock@localhost:5432/mock\",\n  NODE_ENV: process.env.NODE_ENV || \"development\",\n  AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID || \"mock-access-key\",\n  AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY || \"mock-secret-key\",\n  AWS_REGION: process.env.AWS_REGION || \"us-east-1\",\n  S3_BUCKET_NAME: process.env.S3_BUCKET_NAME || \"mock-bucket\",\n  PROCESS_VIDEO_ENDPOINT: process.env.PROCESS_VIDEO_ENDPOINT || \"https://mock-endpoint.com\",\n  PROCESS_VIDEO_ENDPOINT_AUTH: process.env.PROCESS_VIDEO_ENDPOINT_AUTH || \"mock-auth\",\n  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || \"pk_test_mock\",\n  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY || \"sk_test_mock\",\n  STRIPE_SMALL_CREDIT_PACK: process.env.STRIPE_SMALL_CREDIT_PACK || \"price_mock\",\n  STRIPE_MEDIUM_CREDIT_PACK: process.env.STRIPE_MEDIUM_CREDIT_PACK || \"price_mock\",\n  STRIPE_LARGE_CREDIT_PACK: process.env.STRIPE_LARGE_CREDIT_PACK || \"price_mock\",\n  BASE_URL: process.env.BASE_URL || \"http://localhost:3000\",\n  STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET || \"whsec_mock\",\n};\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAC3B,MAAM,MAAM;IACjB,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI;IACxC,cAAc,QAAQ,GAAG,CAAC,YAAY,IAAI;IAC1C,UAAU,mDAAwB;IAClC,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB,IAAI;IACpD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB,IAAI;IAC5D,YAAY,QAAQ,GAAG,CAAC,UAAU,IAAI;IACtC,gBAAgB,QAAQ,GAAG,CAAC,cAAc,IAAI;IAC9C,wBAAwB,QAAQ,GAAG,CAAC,sBAAsB,IAAI;IAC9D,6BAA6B,QAAQ,GAAG,CAAC,2BAA2B,IAAI;IACxE,oCAAoC,yDAAkD;IACtF,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB,IAAI;IACpD,0BAA0B,QAAQ,GAAG,CAAC,wBAAwB,IAAI;IAClE,2BAA2B,QAAQ,GAAG,CAAC,yBAAyB,IAAI;IACpE,0BAA0B,QAAQ,GAAG,CAAC,wBAAwB,IAAI;IAClE,UAAU,QAAQ,GAAG,CAAC,QAAQ,IAAI;IAClC,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB,IAAI;AAC9D","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///app/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///app/src/actions/auth.ts"],"sourcesContent":["\"use server\";\n\nimport { hashPassword } from \"~/lib/auth\";\nimport { signupSchema, type SignupFormValues } from \"~/schemas/auth\";\nimport { db } from \"~/server/db\";\nimport Stripe from \"stripe\";\nimport { env } from \"~/env\";\n\ntype SignupResult = {\n  success: boolean;\n  error?: string;\n};\n\nexport async function signUp(data: SignupFormValues): Promise<SignupResult> {\n  const validationResult = signupSchema.safeParse(data);\n  if (!validationResult.success) {\n    return {\n      success: false,\n      error: validationResult.error.issues[0]?.message ?? \"Invalid input\",\n    };\n  }\n\n  const { email, password } = validationResult.data;\n\n  try {\n    const existingUser = await db.user.findUnique({ where: { email } });\n\n    if (existingUser) {\n      return {\n        success: false,\n        error: \"Email already in use\",\n      };\n    }\n\n    const hashedPassword = await hashPassword(password);\n\n    const stripe = new Stripe(env.STRIPE_SECRET_KEY);\n\n    const stripeCustomer = await stripe.customers.create({\n      email: email.toLowerCase(),\n    });\n\n    await db.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        stripeCustomerId: stripeCustomer.id,\n      },\n    });\n\n    return { success: true };\n  } catch (error) {\n    return { success: false, error: \"An error occured during signup\" };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AAOO,eAAe,OAAO,IAAsB;IACjD,MAAM,mBAAmB,sHAAA,CAAA,eAAY,CAAC,SAAS,CAAC;IAChD,IAAI,CAAC,iBAAiB,OAAO,EAAE;QAC7B,OAAO;YACL,SAAS;YACT,OAAO,iBAAiB,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW;QACtD;IACF;IAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,iBAAiB,IAAI;IAEjD,IAAI;QACF,MAAM,eAAe,MAAM,mHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAEjE,IAAI,cAAc;YAChB,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD,EAAE;QAE1C,MAAM,SAAS,IAAI,sJAAA,CAAA,UAAM,CAAC,0GAAA,CAAA,MAAG,CAAC,iBAAiB;QAE/C,MAAM,iBAAiB,MAAM,OAAO,SAAS,CAAC,MAAM,CAAC;YACnD,OAAO,MAAM,WAAW;QAC1B;QAEA,MAAM,mHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnB,MAAM;gBACJ;gBACA,UAAU;gBACV,kBAAkB,eAAe,EAAE;YACrC;QACF;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiC;IACnE;AACF;;;IAzCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///app/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signUp as '4003d9949bb8b565b282c5a782323ff2bd64a7bd43'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}