{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///app/src/components/scroll-reveal.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface ScrollRevealProps {\n  children: React.ReactNode;\n  direction?: 'up' | 'down' | 'left' | 'right' | 'fade';\n  delay?: number;\n  duration?: number;\n  className?: string;\n}\n\nexport const ScrollReveal = ({ \n  children, \n  direction = 'up', \n  delay = 0, \n  duration = 800,\n  className = '' \n}: ScrollRevealProps) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry && entry.isIntersecting) {\n          setTimeout(() => setIsVisible(true), delay);\n        }\n      },\n      { \n        threshold: 0.1,\n        rootMargin: '0px 0px -10% 0px'\n      }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, [delay]);\n\n  const getTransform = () => {\n    if (isVisible) return 'translate3d(0, 0, 0)';\n    \n    switch (direction) {\n      case 'up': return 'translate3d(0, 60px, 0)';\n      case 'down': return 'translate3d(0, -60px, 0)';\n      case 'left': return 'translate3d(60px, 0, 0)';\n      case 'right': return 'translate3d(-60px, 0, 0)';\n      case 'fade': return 'translate3d(0, 0, 0)';\n      default: return 'translate3d(0, 60px, 0)';\n    }\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={{\n        opacity: isVisible ? 1 : 0,\n        transform: getTransform(),\n        transition: `all ${duration}ms cubic-bezier(0.4, 0, 0.2, 1)`,\n        willChange: 'transform, opacity'\n      }}\n    >\n      {children}\n    </div>\n  );\n};"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAYO,MAAM,eAAe,CAAC,EAC3B,QAAQ,EACR,YAAY,IAAI,EAChB,QAAQ,CAAC,EACT,WAAW,GAAG,EACd,YAAY,EAAE,EACI;;IAClB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAkB;IAEnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM,WAAW,IAAI;0CACnB,CAAC,CAAC,MAAM;oBACN,IAAI,SAAS,MAAM,cAAc,EAAE;wBACjC;sDAAW,IAAM,aAAa;qDAAO;oBACvC;gBACF;yCACA;gBACE,WAAW;gBACX,YAAY;YACd;YAGF,IAAI,IAAI,OAAO,EAAE;gBACf,SAAS,OAAO,CAAC,IAAI,OAAO;YAC9B;YAEA;0CAAO;oBACL,IAAI,IAAI,OAAO,EAAE;wBACf,SAAS,SAAS,CAAC,IAAI,OAAO;oBAChC;gBACF;;QACF;iCAAG;QAAC;KAAM;IAEV,MAAM,eAAe;QACnB,IAAI,WAAW,OAAO;QAEtB,OAAQ;YACN,KAAK;gBAAM,OAAO;YAClB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAS,OAAO;YACrB,KAAK;gBAAQ,OAAO;YACpB;gBAAS,OAAO;QAClB;IACF;IAEA,qBACE,6LAAC;QACC,KAAK;QACL,WAAW;QACX,OAAO;YACL,SAAS,YAAY,IAAI;YACzB,WAAW;YACX,YAAY,CAAC,IAAI,EAAE,SAAS,+BAA+B,CAAC;YAC5D,YAAY;QACd;kBAEC;;;;;;AAGP;GA7Da;KAAA","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///app/src/components/auth-buttons.tsx"],"sourcesContent":["\"use client\";\n\nimport { Button } from \"./ui/button\";\nimport { useAuthModal } from \"~/hooks/use-auth-modal\";\n\nexport function AuthButtons() {\n  const { openLogin, openSignup } = useAuthModal();\n\n  return (\n    <>\n      <Button onClick={openLogin} className=\"btn-ghost\">\n        Sign In\n      </Button>\n      <Button onClick={openSignup} className=\"btn-primary\">\n        Get Started\n      </Button>\n    </>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKO,SAAS;;IACd,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,eAAY,AAAD;IAE7C,qBACE;;0BACE,6LAAC,qIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAW,WAAU;0BAAY;;;;;;0BAGlD,6LAAC,qIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAY,WAAU;0BAAc;;;;;;;;AAK3D;GAbgB;;QACoB,uIAAA,CAAA,eAAY;;;KADhC","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///app/src/components/hero-auth-button.tsx"],"sourcesContent":["\"use client\";\n\nimport { Button } from \"./ui/button\";\nimport { useAuthModal } from \"~/hooks/use-auth-modal\";\n\nexport function HeroAuthButton() {\n  const { openSignup } = useAuthModal();\n\n  return (\n    <Button onClick={openSignup} className=\"btn-primary btn-lg\">\n      Start Creating Clips\n    </Button>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKO,SAAS;;IACd,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,eAAY,AAAD;IAElC,qBACE,6LAAC,qIAAA,CAAA,SAAM;QAAC,SAAS;QAAY,WAAU;kBAAqB;;;;;;AAIhE;GARgB;;QACS,uIAAA,CAAA,eAAY;;;KADrB","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///app/src/components/pricing-button.tsx"],"sourcesContent":["\"use client\";\n\nimport Link from \"next/link\";\nimport { Button } from \"./ui/button\";\nimport { useAuthModal } from \"~/hooks/use-auth-modal\";\n\ninterface PricingButtonProps {\n  plan: {\n    title: string;\n    buttonText: string;\n  };\n  className?: string;\n}\n\nexport function PricingButton({ plan, className }: PricingButtonProps) {\n  const { openSignup } = useAuthModal();\n\n  if (plan.title === \"Enterprise\") {\n    return (\n      <Button asChild className={`${className} btn-full`}>\n        <Link href=\"/contact\">{plan.buttonText}</Link>\n      </Button>\n    );\n  }\n\n  return (\n    <Button onClick={openSignup} className={`${className} btn-full`}>\n      {plan.buttonText}\n    </Button>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAcO,SAAS,cAAc,EAAE,IAAI,EAAE,SAAS,EAAsB;;IACnE,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,eAAY,AAAD;IAElC,IAAI,KAAK,KAAK,KAAK,cAAc;QAC/B,qBACE,6LAAC,qIAAA,CAAA,SAAM;YAAC,OAAO;YAAC,WAAW,GAAG,UAAU,SAAS,CAAC;sBAChD,cAAA,6LAAC,+JAAA,CAAA,UAAI;gBAAC,MAAK;0BAAY,KAAK,UAAU;;;;;;;;;;;IAG5C;IAEA,qBACE,6LAAC,qIAAA,CAAA,SAAM;QAAC,SAAS;QAAY,WAAW,GAAG,UAAU,SAAS,CAAC;kBAC5D,KAAK,UAAU;;;;;;AAGtB;GAhBgB;;QACS,uIAAA,CAAA,eAAY;;;KADrB","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///app/src/components/cta-auth-buttons.tsx"],"sourcesContent":["\"use client\";\n\nimport { Button } from \"./ui/button\";\nimport { useAuthModal } from \"~/hooks/use-auth-modal\";\n\nexport function CTAAuthButtons() {\n  const { openSignup, openLogin } = useAuthModal();\n\n  return (\n    <>\n      <Button onClick={openSignup} className=\"btn-primary btn-lg\">\n        Start Your Free Trial\n      </Button>\n      <Button onClick={openLogin} className=\"btn-secondary btn-lg\">\n        Sign In to Dashboard\n      </Button>\n    </>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKO,SAAS;;IACd,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,eAAY,AAAD;IAE7C,qBACE;;0BACE,6LAAC,qIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAY,WAAU;0BAAqB;;;;;;0BAG5D,6LAAC,qIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAW,WAAU;0BAAuB;;;;;;;;AAKnE;GAbgB;;QACoB,uIAAA,CAAA,eAAY;;;KADhC","debugId":null}}]
}